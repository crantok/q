<?php

/**
 * Implementes hook_perm()
 */
function bidding_perm() {
  return array( 'search auction lots', 'bid on auction lot', 'administer bidding' );
}

/**
 * Implements hook_menu()
 */
function bidding_menu() {

  $items['search-auction-lots'] = array(

    // The title - do NOT use t() as t() is called automatically.
    'title' => 'Search auction lots',

    // Description (hover flyover for menu link). Does NOT use t(), which is
    // called automatically.
    'description' => 'Search lots in the current auction',

    // Fn to be called when this path is accessed.
    'page callback' => '_bidding_search_lots_page',

    'access arguments' => array( 'search auction lots' ),
    'menu_name' => 'primary-links',
    'weight' => -48,
  );
  
  $items['saved-bids'] = array(

    'title callback' => '_bidding_saved_bids_menu_title',

    // Description (hover flyover for menu link). Does NOT use t(), which is
    // called automatically.
    'description' => 'See saved bids and confirm',

    // Fn to be called when this path is accessed.
    'page callback' => '_bidding_current_user_saved_bids_page',

    'access arguments' => array( 'bid on auction lot' ),

    'menu_name' => 'primary-links',
    'weight' => 50,
  );
  
  $items['user/%/saved-bids'] = array(

    // The title - do NOT use t() as t() is called automatically.
    'title' => 'Saved bids',

    // Description (hover flyover for menu link). Does NOT use t(), which is
    // called automatically.
    'description' => 'See saved bids and confirm',

    // Fn to be called when this path is accessed.
    'page callback' => '_bidding_saved_bids_page',
    'page arguments' => array(1),

    'access callback' => '_bidding_access_user_saved_bids',
    'access arguments' => array(1),
    
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * Page callback for viewing and searching lots.
 * 
 * The link to the current auction-lots view changes over time because it
 * includes the auction nid as an argument in the path. Rather than risk
 * confusing the user by taking them to a different URL for each auction (that
 * may then get stored in their browser history) just display the appropriately
 * parameterised view at the current (static) URL.
 */
function _bidding_search_lots_page() {

  $auction_nid = _bidding_get_latest_auction_nid();
  
  // Unfortunately, calling views_page() seems to bypass the title-rewrite
  // that is associated with the view argument, so we're setting the page
  // title manually.
  $auction_number = node_load( array( 'nid' => $auction_nid ) )->title;
  drupal_set_title( t('Search for lots in auction ') . $auction_number );
  
  return views_page( 'auction_lots', 'page', $auction_nid );
}

/*
 * Helper fn to get latest auction Node ID.
 */
function _bidding_get_latest_auction_nid() {
  $auction = views_get_view_result( 'latest_auction' );
//dsm( $auction );
  return $auction[0]->nid;
}

/**
 * Menu item title callback for saved bids page.
 */
function _bidding_saved_bids_menu_title() {

  global $user;
  $title = t('Saved bids');
  if ( $user->uid != 0 ) {
    $title .= ' (' . _bidding_get_num_saved_bids( $user->uid ) . ')';
  }
  return $title;
}


/**
 * Page callback to redirect current user their own saved bids page.
 * 
 * There are two visible menu items for the current user's saved bids page.
 * Rather than show the same output in two places (which might be confusing)
 * we will send the user to the personalised URL.
 */
function _bidding_current_user_saved_bids_page() {
  global $user;
  drupal_goto( 'user/' . $user->uid . '/saved-bids' );
}

/**
 * Page callback for to view and confirm saved bids of a given user.
 */
function _bidding_saved_bids_page( $uid ) {

  $bids = _bidding_get_saved_bids_by_user( $uid );
  $num_bids = count( $bids );
  
  if ( $num_bids > 0 ) {
    // truncate auction lot descriptions
    foreach ( $bids as &$bid ) {
      if ( strlen( $bid['description'] ) > 60 ) {
        $bid['description'] = substr( $bid['description'], 0, 50 ) . '...';
      }
    }
  }
  else {
    // add an empty row
    $bids = array( array( '', '', '' ) );
  }
  
  $html = theme( 'table',
    array( t('Lot number'), t('Lot description'), t('Bid limit') ),
    $bids
  );
  
  if ( $num_bids > 0 ) {
    $html .= drupal_get_form( '_bidding_confirm_saved_bids_form', $bids );
  }
  else {
    $html .= '<br/><strong>You have no saved bids.</strong> ';
    $html .= '<br/>You may <a href="/search-auction-lots">search auction lots</a> if you wish.';
  }

  return $html;
}

/**
 * Access callback to view and confirm saved bids of a given user.
 * 
 * @param $uid
 *   The ID of the User that made the bids that are to be viewed.
 */
function _bidding_access_user_saved_bids( $uid ) {
  global $user;
  if ( $uid == $user->uid ) {
    //dsm( 'bid on auction lot' );
    return user_access( 'bid on auction lot' );
  }
  else {
    //dsm( 'administer bidding' );
    return user_access( 'administer bidding' );
  }
}

/**
 *
 */
function _bidding_confirm_saved_bids_form( $dummy, $bids ) {

  $form = array();

  $form['bids'] = array(
    '#type' => 'value',
    '#value' => $bids,
  );
    
  $form['explanation'] = array(
    '#type' => 'item',
    '#value' =>
      'If you are sure that these are the bids you want to make, then you can <b>Confirm</b> them.<br/>' .
      'On confirming your saved bids, a copy will be emailed to Quest and another to yourself.',
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm these bids'),
  );
  
  return $form;
}

function _bidding_confirm_saved_bids_form_submit( &$form, &$form_state ) {

  global $user;

  $recipients = variable_get('site_mail', '' ) . ', ' . $user->mail;
  //dsm ( $recipients );

  $params = array (
    'site_name' => variable_get( 'site_name', 'Quest'),
    'user_login' => $user->name,
    'user_email' => $user->mail,
    'user_page' => url( 'user/' . $user->uid, array( 'absolute' => TRUE ) ),
    'bids' => $form_state['values']['bids'],
  );
  //dsm( $params );
  
  $message = drupal_mail( 'bidding', 'bids_confirmed', $recipients, language_default(), $params );
  //dsm( $message );
  
  if ( $message['result'] ) {
    drupal_set_message(
      'Your bids have been confirmed. You should receive an email shortly.' );
    _bidding_delete_saved_bids_by_user( $user->uid );
  }
  else {
    // Do nothing - mail system should show an error message to user.
  }    
}

/**
 * Implements hook_block()
 */  
function bidding_block($op = 'list', $delta = '', $edit = array()) {

  switch ($op) {

    case 'list':
      $blocks['make-bid'] = array(
        'info'       => t('Bid on an auction lot'),
        'status'     => 1,
        'region'     => 'content_bottom',
        'visibility' => 1,  // Show on only the listed pages
        'pages'      => 'lot/*',
      );
      return $blocks;

    case 'configure':
      // return form for config if necessary
    break;

    case 'save':
      // deal with a submitted config form. Details are in the $edit variable.
    break;

    case 'view':
      switch ($delta) {
        case 'make-bid':
        
          if ( user_access( 'bid on auction lot' ) ) {
            $lot = _bidding_get_current_lot_node();
            if ( $lot ) {
              $auction = node_load( $lot->field_lot_auction[0]['nid'] );
              $block['subject'] = _bidding_form_block_subject( $lot, $auction );
              $block['content'] = _bidding_form_block_content( $lot, $auction );
            }
            else {
              drupal_set_message(
                'Tried to show bidding block on non-auction-lot page.', 'error' );
            }
          }
          else {
            $block['subject'] = '';
            $block['content'] =
              t('<strong>Please <a href="/user">log in</a> if you want to place bids.</strong>');
          }
        break;
      }
      return $block;
    break;
  }
}

function _bidding_get_current_lot_node() {
  
  $nid = _bidding_get_current_node_id();
  
  if ( $nid ) {
    $node = node_load( $nid );
    if ( $node->type == 'auction_lot' ) {
      return $node;
    }
  }
  
  return NULL;
}

function _bidding_get_current_node_id() {

  if ( arg(0) == 'node' && is_numeric( arg(1) ) ) {
    return arg(1);
  }
  else {
    return NULL;
  }
}

  
/**
 * Subject text for bidding-form block.
 * 
 * @param
 *   A string containing subject text.
 */
function _bidding_form_block_subject( $lot, $auction ) {

  if ( strtotime( $auction->field_auction_end_time[0]['value'] ) < time() ) {
    return '';
  }
  else {
    $timestamp = strtotime( $auction->field_auction_end_time[0]['value'] );
    return
      t( 'Bidding on this item ends on' ) . ' ' . date( 'l jS F Y', $timestamp );
  }
}

/**
 * Content of bidding-form block.
 * 
 * @return
 *   A string containing content of the block.
 */
function _bidding_form_block_content( $lot, $auction ) {

  if ( strtotime( $auction->field_auction_end_time[0]['value'] ) < time() ) {
    return t( 'Bidding has ended for this item.' );
  }
  else {
    return drupal_get_form( '_bidding_form' );
  }
}

function _bidding_form() {
  
  $form = array();
  
  $form['bid-limit'] = array(
    '#type' => 'textfield',
    '#title' => 'Bid limit, in pounds sterling (Â£)',
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save bid'),
  );
  
  return $form;
}

function _bidding_form_validate( &$form, &$form_state ) {
  
  if ( ! is_numeric( $form_state['values']['bid-limit'] ) ) {
    form_set_error( 'bid-limit', 'Please enter a valid bid limit' );
  }
}

/**
 * Submit callback for bidding_form.
 * 
 * Send an email with details of the bid, to the bidder and site email address.
 */
function _bidding_form_submit( &$form, &$form_state ) {
  global $user;
  $lot = _bidding_get_current_lot_node();
  $amount = $form_state['values']['bid-limit'];
  
  $prev_bid = _bidding_get_saved_bid( $user->uid, $lot->nid );
  
  if ( _bidding_save_bid( $user->uid, $lot->nid, $amount ) ) {
    $args = array( '@lotnum' => $lot->title, '@bidamt' => $amount );
    
    if ( $prev_bid ) {
      drupal_set_message( t(
        "Your saved bid for lot @lotnum has been changed to Â£@bidamt", $args ) );
    }
    else {
      drupal_set_message( t(
        "Your bid of Â£@bidamt for lot @lotnum has been saved.", $args ) );
    }
    
    drupal_set_message( t( 'When you have finished bidding, ' .
      'you can <a href="/saved-bids">confirm your saved bids</a>.' ) );
  }
  else {
    drupal_set_message( t( 'We are sorry. There was a problem saving your bid' ) );
  }
}

/**
 * Get saved bids for a specific user.
 * 
 * @param $uid
 *   User id from the {users} table.
 * @param $only_current_auction
 *   Should only bids in the current auction be returned? (Generally we don't
 *   want the user to see any unconfirmed bids from previous auctions. That
 *   would be confusing.)
 * 
 * @return
 *   An array of bids. Each bid is also an array.
 */
function _bidding_get_saved_bids_by_user( $uid, $only_current_auction=TRUE ) {

  $sql = 'SELECT n.title number, l.field_lot_description_value description, b.amount ' .
    'FROM {bidding_basket} b JOIN {node} n ON b.nid = n.nid ' .
    'JOIN {content_type_auction_lot} l ON n.vid = l.vid ' .
    'WHERE b.uid = %d';

  if ( $only_current_auction  ) {
    $sql .= ' AND l.field_lot_auction_nid = %d';
    $query_result = db_query( $sql, $uid, _bidding_get_latest_auction_nid() );
  }
  else {
    $query_result = db_query( $sql, $uid );
  }
  
  $rows = array();
  while ( $row = db_fetch_array( $query_result ) ) {
    $rows[] = $row;
  }
  return $rows;
}

function _bidding_get_num_saved_bids( $uid ) {
  return count( _bidding_get_saved_bids_by_user( $uid ) );
}

function _bidding_get_saved_bid( $uid, $lot_nid ) {

  $sql = 'SELECT * FROM bidding_basket WHERE uid = %d AND nid = %d';
  $query_result = db_query( $sql, $uid, $lot_nid );
  $rows = array();
  while ( $row = db_fetch_object( $query_result ) ) {
    $rows[] = $row;
  }
  return count( $rows ) ? $rows[0] : NULL;
}
  
function _bidding_save_bid( $uid, $lot_nid, $amount ) {
  $sql = 'REPLACE INTO bidding_basket ( uid, nid, amount ) VALUES ( %d, %d, %f )';
  return db_query( $sql, $uid, $lot_nid, $amount );
}

function _bidding_delete_saved_bids_by_user( $uid ) {
  db_query( 'DELETE FROM {bidding_basket} WHERE uid = %d', $uid );
}

/**
 * Implements hook_mail()
 */
function bidding_mail( $key, &$message, $params ) {
  switch ( $key ) {
    
    case 'bids_confirmed': // Compose message containing details of a bid.

      $message['subject'] = $params['site_name'] .
        ' website: ' . $params['user_login'] . ' has confirmed a set of bids';

      $message['body'][0] =
        $params['user_login'] . " has confirmed a set of bids on the " .
        $params['site_name'] . " website. Here are the user details:\n\n" .
        "User:\t\t" . $params['user_login'] . "\n" .
        "User email:\t" . $params['user_email'] . "\n" .
        "Link to user:\t" . $params['user_page'] . "\n\n" .
        "And here are the bids:\n"
      ;

      foreach ( $params['bids'] as $bid ) {  
        $message['body'][0] .=
          "\nLot number:\t" . $bid['number'] . ",\tBid limit:\tÂ£" . $bid['amount'];
      }
        
      break;
  }
  //dsm( $message );
  return $message;
}


// @todo : Things that did not get added to online_bidding feature:
// - block visibility settings - don't want to show menu sidebar blocks on /auction/*/search-lots
// - permissions - auth user needs to have all the premissions that anon user has
// - turning off post details in the global theme configuration

// @bonus : Add simplenews to replace mailchimp (simple interface for Alec)
// @bonus : auto-clear-up or manual delete of old lot data
// @bonus : Report for customer - see bids they've made
// @bonus : Report for admin - see winning bids for each lot (bid time is v. important)




function bidding_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ( $op === 'view' ) {
//    dsm( $node );
    
    if ( $node->type == 'auction_lot' ) {
      drupal_set_title( 'Lot number ' . $node->title );
    }
  }
}







